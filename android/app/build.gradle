

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"



def propertiesFilename = "private_key.properties"


if (!project.file(propertiesFilename).exists()) {
    propertiesFilename = "public_key.properties"
}

def signingProperties = new Properties()
signingProperties.load(new FileInputStream(file(propertiesFilename)))


android {

    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }


    defaultConfig {
        resConfigs "en", "hu"

        /*
        if(buildTypes == release){
            ndk {
                abiFilters "armeabi", "x86", "armeabi-v7a"
            }
        }
        */


        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.hazizz.mobile"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }


    signingConfigs {
        release {
            /*
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            */

            keyAlias signingProperties.releaseSignKeyAlias
            keyPassword signingProperties.releaseSignKeyPassword
            storeFile file(signingProperties.releaseStoreFilePath)
            storePassword signingProperties.releaseStorePassword
        }
    }
    buildTypes {
        release {
            /*

            ndk {
                abiFilters "armeabi", "x86", "armeabi-v7a",'arm64-v8a', 'x86_64'
            }
            */
            signingConfig signingConfigs.release

            minifyEnabled true
            useProguard true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /*
    buildTypes {
        release {
            ndk {
                abiFilters "armeabi", "x86", "armeabi-v7a"
            }

            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
    */
}

flutter {
    source '../..'
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.android.support:multidex:1.0.3'

    // Check for v11.4.2 or higher
    // Add dependency
    implementation "com.google.gms:google-services:4.2.0"
    implementation 'com.facebook.android:facebook-android-sdk:[5,6)'

    implementation 'com.google.firebase:firebase-messaging:20.0.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.3.1'
    implementation 'com.google.firebase:firebase-analytics:18.0.2'


}

configurations.all {

    exclude group: 'com.google.guava', module: 'listenablefuture'
    exclude group: 'com.google.guava', module: 'failureaccess'

    resolutionStrategy {
        eachDependency { details ->
            if('guava' == details.requested.name) {
                details.useVersion '27.0-android'
            }
        }
    }
}


apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
